<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GBK">
<title>AC自定义设置</title>
    <link rel="stylesheet" type="text/css" href="/newver/resources/css/ext-all.css" /> 
        <style type="text/css">
        .icon-grid {
            background-image:url(/newver/resources/themes/images/share/grid.png) !important;
        }
        .add {
            background-image:url(/newver/resources/themes/images/share/add.gif) !important;
        }
        .option {
            background-image:url(/newver/resources/themes/images/share/plugin.gif) !important;
        }
        .remove {
            background-image:url(/newver/resources/themes/images/share/delete.gif) !important;
        }
        .exp {
            background-image:url(/newver/resources/themes/images/share/application_go.png) !important;
        }
        .accept {
            background-image:url(/newver/resources/themes/images/share/accept.png) !important;
        }
     .x-tab-default-top button, .x-tab-default-top.x-tab-inner {
		  height: 16px !important;
		  line-height: 16px;
	    }

    </style>
<style type="text/css">   
   .x-selectable, .x-selectable * {   
    -moz-user-select: text!important;   
    -khtml-user-select: text!important;   
}   
</style>
      
    <script type="text/javascript" src="/newver/resources/js/ext-all.js"></script>
<script>  


Ext.Loader.setConfig({enabled: true});
Ext.Loader.setPath('Ext.ux', '/newver/ux/');
Ext.require([
    'Ext.form.*',
    'Ext.window.*',
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.util.*',
    'Ext.window.MessageBox',
    'Ext.toolbar.Paging',
    'Ext.ux.PreviewPlugin',
    'Ext.tree.*'
]);
Ext.require([
    'Ext.form.field.File',
    'Ext.form.field.Number',
    'Ext.form.Panel',
    'Ext.window.MessageBox'
]);
var store;
var temp_id='';
var preid='';

function reflash(){
	  var m_name = document.getElementById("form1").m_name.value;
	  var keyword1 = document.getElementById("form1").mokeyword.value;
	  if(keyword1 == '输入AC名称/IP'){
	 		 keyword1 = '';
	  }
	  store.load({params: {m_name:m_name,mokeyword:keyword1}});  
}

Ext.define('TreeCombox', {  
    extend: 'Ext.form.field.Picker',  
    xtype: 'treecombox',  
    triggerCls: Ext.baseCSSPrefix + 'form-arrow-trigger',  
    config: {  
        displayField: null,  
        columns: null,  
        rootVisible: false,  
        selectOnTab: true,  
        firstSelected: false,  
        maxPickerWidth: 119,  
        maxPickerHeight: 360,  
        minPickerHeight: 100  
    },  
    editable: false,  
    initComponent: function() {  
        var me = this;  
        me.callParent(arguments);  
        this.addEvents('select');  
        me.store.on('load', me.onLoad, me);  
          
    },  
    createPicker: function() {  
        var me = this,  
            picker = Ext.create('Ext.tree.Panel', {  
                store: me.store,  
                floating: true,  
                hidden: true,  
                width: me.maxPickerWidth,  
                displayField: me.displayField,  
                columns: me.columns,  
                maxHeight: me.maxTreeHeight,  
                shadow: false, 
                rootVisible:false,  
                manageHeight: false,  
                listeners: {  
                    itemclick: Ext.bind(me.onItemClick, me)  
                },  
                viewConfig: {  
                    listeners: {  
                        render: function(view) {  
                            view.getEl().on('keypress', me.onPickerKeypress, me);  
                        }  
                    }  
                }  
            }),  
            view = picker.getView();  
  
        view.on('render', me.setPickerViewStyles, me);  
        if (Ext.isIE9 && Ext.isStrict) {  
            view.on('highlightitem', me.repaintPickerView, me);  
            view.on('unhighlightitem', me.repaintPickerView, me);  
            view.on('afteritemexpand', me.repaintPickerView, me);  
            view.on('afteritemcollapse', me.repaintPickerView, me);  
        }  
        return picker;  
    },  
    setPickerViewStyles: function(view) {  
        view.getEl().setStyle({  
            'min-height': this.minPickerHeight + 'px',  
            'max-height': this.maxPickerHeight + 'px'  
        });  
    },  
    repaintPickerView: function() {  
        var style = this.picker.getView().getEl().dom.style;  
        style.display = style.display;  
    },  
    alignPicker: function() {  
        var me = this,  
            picker;  
  
        if (me.isExpanded) {  
            picker = me.getPicker();  
            if (me.matchFieldWidth) {  
                picker.setWidth(this.picker.getWidth());  
            }  
            if (picker.isFloating()) {  
                me.doAlign();  
            }  
        }  
    },  
    onItemClick: function(view, record, node, rowIndex, e) {  

  
//    	alert(record.data.id);
        this.selectItem(record);  
    },  
    onPickerKeypress: function(e, el) {  
        var key = e.getKey();  
  
        if(key === e.ENTER || (key === e.TAB && this.selectOnTab)) {  
            this.selectItem(this.picker.getSelectionModel().getSelection()[0]);  
        }  
    },  
    selectItem: function(record) {  
        var me = this; 
     document.getElementById("form1").mid.value=record.get('id');
     temp_id=record.get('id');
     me.setValue(record.get('text'));  
        me.picker.hide();  
        me.inputEl.focus();  
        me.fireEvent('select', me, record);

    },  
    onExpand: function() {  
        var me = this,  
            picker = me.picker,  
            store = picker.store,  
            value = me.value;  
        if(value) {  
            var node = store.getNodeById(value);  
            if(node)  
                picker.selectPath(node.getPath());  
        } else {  
            var hasOwnProp = me.store.hasOwnProperty('getRootNode');  
            if(hasOwnProp)  
                picker.getSelectionModel().select(store.getRootNode());  
        }  
  
        Ext.defer(function() {  
            picker.getView().focus();  
        }, 1);  
    },  
    setValue: function(value) {  
        var me = this,record;  
        me.value = value;  
        if (me.store.loading) {  
            return me;  
        }  
        try{  
            //var hasOwnProp = me.store.hasOwnProperty('getRootNode');  
            //record = value ? me.store.getNodeById(value) : (hasOwnProp ? me.store.getRootNode() : null);  
            //me.setRawValue(record ? record.get(this.displayField) : '');  
            var i = value.indexOf(">");
            var j = value.indexOf("</");
            if(i != -1 && j != -1)
            {
            		me.setRawValue(value.substring(i+1,j));
            }
            else 
            {
            		me.setRawValue(value);
            }
        }catch(e){  
            me.setRawValue('');  
        }  
  
        return me;  
    },  
    getValue: function() {  
        return this.value;  
    },  
    onLoad: function(store,node,records) {  
        var value = this.value;  
        if (value) {  
            this.setValue(value);  
        }else{  
            if(this.firstSelected){  
                if(records && records.length > 0){  
                    var record = records[0];  
                    this.setValue(record.get(this.valueField));  
                }  
            }  
        }  
    },  
    getSubmitData: function() {  
        var me = this,  
            data = null;  
        if (!me.disabled && me.submitValue) {  
            data = {};  
            data[me.getName()] = '' + me.getValue();  
        }  
        return data;  
    },  
    onTriggerClick: function() {  
        var me = this;  
        //me.store.load();  
        if (!me.readOnly && !me.disabled) {  
            if (me.isExpanded) {  
                me.collapse();  
            } else {  
                me.expand();  
            }  
            me.inputEl.focus();  
        }  
    }  
});
store_classtree=Ext.create('Ext.data.TreeStore', {   
			fields: ['text'],
			autoLoad : true,
			proxy: {   
				type: 'ajax',   
				url: '/pronline/Msg?FunName@ncwlanTreeGroup_comp_v4'  
			}  
});

Ext.define('Ext.ux.grid.plugin.RowEditing', {   
   extend: 'Ext.grid.plugin.RowEditing',   
   alias: 'plugin.ux.rowediting',    
      
   /**  
    * 是否添加记录在当前位置<br/>  
    * whether add record at current rowIndex.<br/>  
    * see {@link #cfg-addPosition}  
    * @cfg {Boolean}  
    */  
   addInPlace: false,   
      
   addPosition: 0,   
      
   /**  
    * 是否点击触发事件,0代表不触发,1代表单击,2代表双击,默认为双击.<br/>  
    * The number of clicks on a grid required to display the editor (disable:0,click:1,dblclick:2)  
    * @cfg {Number}  
    */  
   clicksToEdit:2,   
      
   /**  
    * 是否在取消编辑的时候自动删除添加的记录  
    * if true, auto remove phantom record on cancel,default is true.  
    * @cfg {Boolean}  
    */  
   autoRecoverOnCancel: true,   
      
   /**  
    * adding flag  
    * @private  
    * @type Boolean  
    */  
   adding: false,   
      
   autoCancel:true,   
      
   /**  
    * when add record, hide error tooltip for the first time  
    * @private  
    * @type Boolean  
    */  
   hideTooltipOnAdd: true,   
      
   /**  
    * register canceledit event && relay canceledit event to grid  
    * @param {Ext.grid.Panel} grid  
    * @override  
    * @private  
    */  
   init:function(grid){   
       var me = this;   
       /**  
        * 取消编辑事件.<br/>  
        * Fires canceledit event.And will be relayEvents to Grid.<br/>  
        * @see {@link Ext.ux.grid.RowActions#event-beforeaction} <br/>  
        * @event canceledit  
        * @param {Object} context  
        */  
       me.addEvents('canceledit');   
       me.callParent(arguments);   
       grid.addEvents('canceledit');   
       grid.relayEvents(me, ['canceledit']);   
   },   
      
   /**  
    * 提供默认的Editor配置  
    *      @example  
    *      {header:'手机',dataIndex:'phone',fieldType:'numberfield',field:{allowBlank:true}}  
    * provide default field config  
    * @param {String} fieldType 可选值:numberfield,checkboxfield,passwordField  
    * @return {Object}   
    * @protected  
    */  
   getFieldCfg: function(fieldType){   
        switch(fieldType){   
            case 'passwordField':   
                return {   
                    xtype: 'textfield',   
                    inputType: 'password',   
                    allowBlank:false  
                }   
            case 'numberfield':   
                return {   
                    xtype: 'numberfield',   
                    hideTrigger: true,   
                    keyNavEnabled: false,   
                    mouseWheelEnabled: false,   
                    allowBlank:false  
                }   
                   
            case 'checkboxfield':   
                return {   
                    xtype: 'checkboxfield',   
                    inputValue: 'true',   
                    uncheckedValue: 'false'  
                }   
            }   
    },   
       
    /**  
     * Help to config field,just giving a fieldType and field as additional cfg.  
     * see {@link #getFieldCfg}  
     * @private  
     * @override  
     */  
    getEditor: function() {   
        var me = this;   
  
        if (!me.editor) {   
            Ext.each(me.grid.headerCt.getGridColumns(),function(item,index,allItems){   
                if(item.fieldType){   
                    item.field = Ext.applyIf(item.field||{},this.getFieldCfg(item.fieldType))   
                }   
            },this)   
            // keep a reference for custom editor..   
            me.editor = me.initEditor();   
        }   
        me.editor.editingPlugin = me   
        return me.editor;   
    },   
       
    /**  
     * if clicksToEdit===0 then mun the click/dblclick event  
     * @private  
     * @override  
     */  
    initEditTriggers: function(){   
        var me = this    
        var clickEvent = me.clicksToEdit === 1 ? 'click' : 'dblclick'  
        me.callParent(arguments);    
        if(me.clicksToEdit === 0){   
            me.mun(me.view, 'cell' + clickEvent, me.startEditByClick, me);    
        }   
    },   
       
    /**  
     * 添加记录  
     * add a record and start edit it (will not sync store)  
     * @param {Model/Object} data Data to initialize the Model's fields with <br/>  
     * @param {Object} config see {@link #cfg-addPosition}.   
     */  
    startAdd: function(data,config){   
        var me = this;   
        var cfg = Ext.apply({   
            addInPlace: this.addInPlace,   
            addPosition: this.addPosition,   
            colIndex: 0   
        },config)   
           
        //find the position   
        var position;   
        if(cfg.addInPlace){   
            var selected = me.grid.getSelectionModel().getSelection()   
            if(selected && selected.length>0){   
                position = me.grid.store.indexOf(selected[0])    
                console.log('a',position)   
                position += (cfg.addPosition<=0) ? 0: 1   
            }else{   
                position = 0   
            }   
        }else{   
            position = (cfg.addPosition==-1 ? me.grid.store.getCount() : cfg.addPosition) || 0   
        }   
           
        var record = data.isModel ? data : me.grid.store.model.create(data);   
        var autoSync = me.grid.store.autoSync;   
        me.grid.store.autoSync = false;   
        me.grid.store.insert(position, record);   
        me.grid.store.autoSync = autoSync;   
          
        me.adding = true  
        me.startEdit(position,cfg.colIndex);   
           
        //since autoCancel:true dont work for me   
        if(me.hideTooltipOnAdd && me.getEditor().hideToolTip){   
            me.getEditor().hideToolTip()   
        }   
    },   
       
    /**  
     * 编辑之前,自动取消编辑  
     * Modify: if is editing, cancel first.  
     * @private  
     * @override  
     */  
    startEdit: function(record, columnHeader) {   
        var me = this;   
        if(me.editing){   
            me.cancelEdit();    
        }  
 
        me.callParent(arguments);   
//        Ext.getCmp('gpid').setValue(record.get('groupname'));
//        Ext.getCmp('gpid').setValue(record.get('in_promisc'));
//        temp_id=record.get('groupid');         //从store中获取双击的groupid
				
    },   
       
    /**  
     * 修改adding的状态值  
     * Modify: set adding=false  
     * @private  
     * @override  
     */  
    completeEdit: function() {   
        var me = this;   
        if (me.editing && me.validateEdit()) {   
            me.editing = false;   
            me.fireEvent('edit', me.context);   
        }   
        me.adding = false 

				var acname = me.context.record.data.acname;
				var acip = me.context.record.data.acip;
        var acport  = me.context.record.data.acport;
        
        var ac_id = me.context.record.data.ac_id;
				
				
        
        
        if(acname==''||acname == '请输入AC名称')
        {	
        	alert('AC名称不能为空');
        	return ;
        }
			
      	store.load({params: {update:"update",ac_id:ac_id,acname:acname,acip:acip,acport:acport}});
  
    },   
       
    /**  
     * 取消编辑  
     * 1.fireEvent 'canceledit'  
     * 2.when autoRecoverOnCancel is true, if record is phantom then remove it  
     * @private  
     * @override  
     */  
    cancelEdit: function(){
    
        var me = this; 

        if (me.editing) {   
            me.getEditor().cancelEdit();   
            me.editing = false;   
            me.fireEvent('canceledit', me.context);    
            if (me.autoRecoverOnCancel){ 
//     						var temp=me.context.record.data.groupname;  
     						var temp=me.context.record.data.acname;  
                if((me.adding)||(temp=='输入AC名称')||(temp=='')){   
                    me.context.record.store.remove(me.context.record);   
                    me.adding = false ; 
                }else{   
                    //不需要reject,因为Editor没有更改record.   
                    //me.context.record.reject()   
                }   
            }   
        }  


         
    }   
}) ; 

var rowEditing = Ext.create('Ext.ux.grid.plugin.RowEditing', {
    	      pluginId:'rowEditing', 
            saveBtnText: "保存", 
            cancelBtnText: "取消", 
            autoRecoverOnCancel:true,
            autoCancel: true
});

Ext.onReady(function(){
    Ext.tip.QuickTipManager.init();
   
    Ext.define('EimData', {
        extend: 'Ext.data.Model',
        fields: [
            'iNum', 'ac_id', 'acname', 'acip', 'acport'
        ],
        idProperty: 'ac_id'
    });

    // create the Data Store
    //重写排序函数，解决远程条件查询问题
    Ext.data.Store.prototype.doSort = function() {
    		reflash();
    }
    
    store = Ext.create('Ext.data.Store', {
        pageSize: 1000,
        model: 'EimData',
        remoteSort: true,
        proxy: {
            type: 'ajax',
            url: '/pronline/Msg?FunName@ncmAC_Server_SelfParaSet',
            reader: {
                type:'json',
                root: 'eimdata',
                totalProperty: 'totalCount'
            },         
            simpleSortMode: true
        },
        sorters: [{
            property: 'addtime',
            direction: 'DESC'
        }]
    });

    var pluginExpanded = true;
    
    var sm = Ext.create('Ext.selection.CheckboxModel',{
        listeners: {
            selectionchange: function(sm, selections) {
            		grid.down('#removeButton').setDisabled(selections.length == 0)
								// grid.down('#moveButton').setDisabled(selections.length == 0);
            }
        }
    });
    
    
 		//查询 
    Ext.define('State', {
        extend: 'Ext.data.Model',
        fields: [
            {type: 'string', name: 'groupid'},
            {type: 'string', name: 'groupname'}
        ]
    });
   
		//对翻页工具条重新构建，替换翻页函数    
	  Ext.PagingToolbar1 = Ext.extend(Ext.PagingToolbar, {
	     doRefresh:function(){  
	     reflash();
	    },
	    moveLast:function(){
	    	var b=this,a=b.getPageData().pageCount;
	    	if(b.fireEvent("beforechange",b,a)!==false){
	    	store.currentPage=a;
	    	reflash();
	       }},
	     moveFirst:function(){
	      if(this.fireEvent("beforechange",this,1)!==false){
	      store.currentPage=1;
	      reflash();}}, 
	     movePrevious:function(){var b=this,a=b.store.currentPage-1;if(a>0){if(b.fireEvent("beforechange",b,a)!==false){store.currentPage=a;reflash();}}},
	     moveNext:function(){var c=this,b=c.getPageData().pageCount,a=c.store.currentPage+1;if(a<=b){if(c.fireEvent("beforechange",c,a)!==false){store.currentPage=a;reflash();}}},
	      
	      
	      onPagingKeyDown:function(i,h){
	     var d=this,b=h.getKey(),c=d.getPageData(),a=h.shiftKey?10:1,g;
	     if(b==h.RETURN){h.stopEvent();g=d.readPageFromInput(c);
	        if(g!==false){
	         g=Math.min(Math.max(1,g),c.pageCount);
	         if(d.fireEvent("beforechange",d,g)!==false){
	        //d.store.loadPage(g)
	         d.store.currentPage=g;
	         reflash();
	        }        
	      }
	    }
	    else{
	       if(b==h.HOME||b==h.END){
	    			h.stopEvent();g=b==h.HOME?1:c.pageCount;i.setValue(g)
	       }
	       else{
	         if(b==h.UP||b==h.PAGEUP||b==h.DOWN||b==h.PAGEDOWN){
	          h.stopEvent();g=d.readPageFromInput(c);
	           if(g){
	             if(b==h.DOWN||b==h.PAGEDOWN){a*=-1}
	             g+=a;
	             if(g>=1&&g<=c.pages){i.setValue(g)}
	             }
	            }
	           }
	         }  
	      }
	
		});

    var aaa=screen.width;
    if(aaa>1440) aaa=1440;
    if(aaa<1024) aaa=1024;
    aaa=aaa-241;
    
    var store_ethes = Ext.create('Ext.data.Store', {
        model: 'State',
        remoteSort: true,
         proxy: {
            type: 'ajax',
            url: '/pronline/Msg?FunName@ncmWebModuleManSelect&flag@3',
            reader: {
                type:'json',
                root: 'corpclassdata'              
            },         
            simpleSortMode: true
        }
    });
    store_ethes.load();   
    
    var grid = Ext.create('Ext.grid.Panel', {
        scrollOffset: 0,
        height: 895,
				autoScroll:true,
        store: store,
        selModel: sm,
        frame:false,
				border:false,
        columns:[{
            text: "AC名称",
            dataIndex: 'acname', 
						width:150,
            sortable: true,
            editor: {
		           	listeners: {
					          'focus':function(){
					          	 if(this.value=='请输入AC名称'){
					                this.setValue('');
					             }
					          }
					      },			    
		           	allowBlank:true
           	}
        },{
            text: "ACIP",
            dataIndex: 'acip', 
           	width:150,
            sortable: true,
            editor: {
		           	listeners: {
					          'focus':function(){
					          	 if(this.value=='请输入ACIP'){
					                this.setValue('');
					             }
					          }
					      },			    
		           	allowBlank:true
           	}
        },{
            text: "AC端口",
            dataIndex: 'acport', 
           	width:150,
            sortable: true,
            editor: {
		           	listeners: {
					          'focus':function(){
					          	 if(this.value=='请输入AC端口'){
					                this.setValue('');
					             }
					          }
					      },			    
		           	allowBlank:true
           	}
        },{
            flex: 1
        }],
        
        columnLines: true,
                                        
        // paging bar on the bottom
        tbar: Ext.create('Ext.PagingToolbar1', {
            store: store,
            displayInfo: true,
            displayMsg: '显示{0} - {1}条记录 共{2}条记录',
            emptyMsg: "没有记录可显示",
                                       
            items: [
            '-',{
               xtype:'textfield',
               width: 160,
               id:'keyword',
               name:'keyword',
               style:'color:#7aa7d5',
               value:'',
               emptyText:'输入AC名称/IP',
               enableKeyEvents:true,
               listeners:{
                 'focus':function(){
	                 if(this.value=='输入AC名称/IP'){                
	                    this.setValue('');
	                 }
                 }
                 ,
                 'keydown' : function(i,e){
		                var aae=e.getKey() ; 
		                if(aae==13){
		                	if(this.value != '输入AC名称/IP'){    
		                    var aa=Ext.getCmp('keyword').value;
		                    document.getElementById("form1").mokeyword.value=aa;
		                    reflash();  
		                  }
		                }
	                
               		}
               }
            },{
                text:'确认',
                iconCls:'accept',
                handler: function(){
                var aa=Ext.getCmp('keyword').value;
                if(aa!='输入AC名称/IP'){
                  document.getElementById("form1").mokeyword.value=aa;
                  
                }
                reflash();
                }
            },'-',{
                text:'增加',
                iconCls:'add',
                handler : function() {
                rowEditing.cancelEdit();
                var r = Ext.create('EimData', {
                    acname: '输入AC名称'
                });
                if(document.getElementById("form1").groupid.value!=''){
                   preid=document.getElementById("form1").groupid.value;
                }
                temp_id=preid;
		            var i,lcount;
		            
                store.insert(0, r);
              	rowEditing.startEdit(0, 0);
            		}
            },'-',{
                text:'删除',
                itemId: 'removeButton',
                iconCls:'remove',
                disabled: true,
                handler:function(){
								   if(confirm('您真的要执行删除操作吗？')){                  
		                 	 var selsid;  
		                 	 var rows=sm.getSelection();
		                   selsid='';
		                   for(var i=0;i<rows.length;i++){
			                  	if(i==0){
			                  	 		selsid=rows[i].getId();
			                  	}
			                  	else{
			                       	selsid=selsid+","+rows[i].getId();
			                    }
		                   }
		                   
		                   store.load({params: {del: "del",selsid:selsid}});
	                 } 
                }
 
            }
//            , '-', {
//                text:'应用',
//                itemId: 'applyButton',
//                iconCls:'accept',
//                disabled: false,
//                handler:function(){
//								   if(confirm('您真的要执行应用操作吗？')){  
//	                      var app="del";
//	                      store.load({params: {app: app}});
//	                      app="";
//	                 }  
//                }
//            }
          
            ]
        }),
        plugins: [rowEditing],
        renderTo: 'grid-corp'
    });
    reflash();
});
</script>
</head>
<body>
	<form name="form1" id="form1" action="/pronline/Msg">
		<input type="hidden" name="FunName" value="ncmAC_Server_SelfParaSet">
		<input type="hidden" name="groupid" value="">
		<input type="hidden" name="m_name" value="">	
	  <input type="hidden" name="m_type" value="">
		<input type="hidden" name="mokeyword" value="">
	</form>
  <div id="grid-corp"></div>
</body>
</html>
